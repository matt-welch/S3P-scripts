#!/bin/bash

IMAGE_STORE="/home/matt/images"
function copyImage ( ) {
    # clone the original HDD image with rsync to show status: 
    SOURCE_IMAGE=$1
    NEW_IMAGE_PATH=$2
    echo "$0 :: [$(date)] :: cloning source image <$SOURCE_IMAGE> to <$NEW_IMAGE_PATH> ..."
    rsync --progress -av ${SOURCE_IMAGE} ${NEW_IMAGE_PATH}
    chown qemu:qemu ${NEW_IMAGE_PATH}
    echo "$0 :: [$(date)] :: cloning source image <$SOURCE_IMAGE> to <$NEW_IMAGE_PATH> is complete."
}

function sysprepImage ( ) {
    # use virt-sysprep to prepare the image
    SYSPREP_OPS="net-hostname,net-hwaddr,fs-uuids,dhcp-client-state" 
    # Note: SYSPREP_OPS variable may not end in a ','
    echo "$0 :: [[$(date)] :: beginning virt-sysprep of <$NEW_IMAGE_PATH> with operations: $SYSPREP_OPS "
    virt-sysprep --enable ${SYSPREP_OPS} -a "${NEW_IMAGE_PATH}"
    echo "$0 :: [[$(date)] :: virt-sysprep of <$NEW_IMAGE_PATH> with operations: \"$SYSPREP_OPS\" is now complete."
}

NEW_IMAGE_NAME="$1"
if [[ -z "$NEW_IMAGE_NAME" ]]; then
    echo "Warning [$0]: no new image name specified."
    echo "Usage: $0 new_image_name.ext"
else
    SOURCE_IMAGE="${IMAGE_STORE}/vh-seed.img"
    NEW_IMAGE_PATH="${IMAGE_STORE}/${NEW_IMAGE_NAME}"
    if [[ -f "${NEW_IMAGE_PATH}" ]] ; then 
        # image file already exisis
        # ask the user if they want to continue
        read -p "Domain image \"$1\" already exists, replace it? [y/N]: " -n 1 input
        echo
        if [[ "$input" == "y" ]] ; then 
            copyImage "$SOURCE_IMAGE" "$NEW_IMAGE_PATH"
            sysprepImage 
        else
            # ask the user if they want to re-do the sysprep on the existing image
            read -p "Perform virt-sysprep on existing image? [y/N]: " -n 1 input
            echo
            if [[ "$input" == "y" ]] ; then 
                sysprepImage
            fi
        fi
    else
        copyImage "$SOURCE_IMAGE" "$NEW_IMAGE_PATH"
        sysprepImage 
    fi
fi
# # virt-sysprep available operations: 
# abrt-data * Remove the crash data generated by ABRT
# bash-history * Remove the bash history in the guest
# blkid-tab * Remove blkid tab in the guest
# ca-certificates   Remove CA certificates in the guest
# crash-data * Remove the crash data generated by kexec-tools
# cron-spool * Remove user at-jobs and cron-jobs
# customize * Customize the guest
# dhcp-client-state * Remove DHCP client leases
# dhcp-server-state * Remove DHCP server leases
# dovecot-data * Remove Dovecot (mail server) data
# firewall-rules   Remove the firewall rules
# flag-reconfiguration   Flag the system for reconfiguration
# fs-uuids   Change filesystem UUIDs
# kerberos-data   Remove Kerberos data in the guest
# logfiles * Remove many log files from the guest
# lvm-uuids * Change LVM2 PV and VG UUIDs
# machine-id * Remove the local machine ID
# mail-spool * Remove email from the local mail spool directory
# net-hostname * Remove HOSTNAME in network interface configuration
# net-hwaddr * Remove HWADDR (hard-coded MAC address) configuration
# pacct-log * Remove the process accounting log files
# package-manager-cache * Remove package manager cache
# pam-data * Remove the PAM data in the guest
# puppet-data-log * Remove the data and log files of puppet
# rh-subscription-manager * Remove the RH subscription manager files
# rhn-systemid * Remove the RHN system ID
# rpm-db * Remove host-specific RPM database files
# samba-db-log * Remove the database and log files of Samba
# script * Run arbitrary scripts against the guest
# smolt-uuid * Remove the Smolt hardware UUID
# ssh-hostkeys * Remove the SSH host keys in the guest
# ssh-userdir * Remove ".ssh" directories in the guest
# sssd-db-log * Remove the database and log files of sssd
# tmp-files * Remove temporary files
# udev-persistent-net * Remove udev persistent net rules
# user-account   Remove the user accounts in the guest
# utmp * Remove the utmp file
# yum-uuid * Remove the yum UUID

